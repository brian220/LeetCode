/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* removeZeroSumSublists(ListNode* head) {
        unordered_map<int, ListNode*> leftSumMap;
        unordered_map<int, ListNode*>::iterator iter;
        int leftSum = 0;
        ListNode* root = new ListNode(0);
        root -> next = head;
        ListNode* currentNode = root;
        while (currentNode != NULL) {
            leftSum += currentNode -> val;
            iter = leftSumMap.find(leftSum);
            if (iter != leftSumMap.end()) {
                ListNode* prev = leftSumMap[leftSum];
                ListNode* start = prev;
                int tmpLeftSum = leftSum;
                while (start != currentNode) {
                    start = start -> next;
                    tmpLeftSum += start -> val;
                    if (start != currentNode) leftSumMap.erase(tmpLeftSum);
                }
                prev -> next = currentNode -> next;
            }
            else {
                leftSumMap[leftSum] = currentNode;
            }
            
            currentNode = currentNode -> next;
        }
        
        return root -> next;
    }
};
