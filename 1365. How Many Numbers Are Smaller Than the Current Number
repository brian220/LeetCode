// Easy
// Solution Use Hash Table(map in STL) + Sorting
class Solution {
public:
    static bool myfunction (int i,int j) { return (i<j); }
    vector<int> smallerNumbersThanCurrent(vector<int>& nums) {
        vector<int> result;
        
        // Sort the nums first
        vector<int> snums = nums;
        sort (snums.begin(), snums.end(), myfunction);
        
        map<int, int> hash_num_smallerCount;
        map<int, int>::iterator iter;
        
        for(int i = 0; i < snums.size(); i ++) {
            iter = hash_num_smallerCount.find(snums[i]);
            
            // If not in the hash table
            if(iter == hash_num_smallerCount.end()) {
                hash_num_smallerCount[snums[i]] = i;
            }
        }
        
        for(int i = 0; i < nums.size(); i ++) {
            result.push_back(hash_num_smallerCount[nums[i]]);
        }
        
        return result;
    }
};



// Improved the Speed
// Because the 0 << nums[i] << 1
// So can use the vector(array) to replace the hash table to achieve O(1) look up.
class Solution {
public:
    static bool myfunction (int i,int j) { return (i<j); }
    
    vector<int> smallerNumbersThanCurrent(vector<int>& nums) {
        vector<int> n(101, -1); // Use an array to replace STL::map
        
        vector<int> results;
        vector<int> snums = nums;
        sort(snums.begin(), snums.end(), myfunction);
            
        for(int i = 0; i < snums.size(); i ++) {
            if(n[snums[i]] == -1) {
                n[snums[i]] = i;
            }
        }
        
        for(int i = 0; i < nums.size(); i ++) {
            results.push_back(n[nums[i]]);
        }
        
        return results;
    }
};
