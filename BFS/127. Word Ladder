// Change the mapping way 
// hot -> h*t , *ot, ho* , add "hot" to mMap[h*t], 
// hit -> h*t , *it, hi* , add "hit" to mMap[h*t], 
// save the time to find adjacent words.

class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
       
        wordList.push_back(beginWord);
        int listSize = wordList.size();
        map<string, vector<int>> mMap;
        int length = wordList[0].size();
        for (int i = 0; i < listSize; i ++) {
            for (int j = 0; j < length; j ++) {
                string temp = wordList[i];
                temp[j] = '*';
                mMap[temp].push_back(i);
            }
        }
        
        vector <bool> wordUsed(listSize, false);
        wordUsed[listSize - 1] = true;
        
        deque <int>  ladder;
        ladder.push_back(wordList.size() - 1);
        int step = 0;
        
        for (step = 2; step < wordList.size() + 2; step ++) {
            int size = ladder.size();
            for (int i = 0; i < size; i ++) {
                int stringIndex = ladder.front();
                ladder.pop_front();
                string currentString = wordList[stringIndex];
                for (int j = 0; j < currentString.size(); j ++) {
                    string temp = currentString;
                    temp[j] = '*';
                    for (int k = 0; k < mMap[temp].size(); k ++) {
                        int curIndex = mMap[temp][k];
                        if (wordUsed[curIndex] == false) {
                            if (wordList[curIndex] == endWord) {
                                return step;
                            }
                            ladder.push_back(curIndex);
                            wordUsed[curIndex] = true;
                        }
                    }
                }
            }
        }
        
        return 0;
    }
    
};
