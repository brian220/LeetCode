/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class BSTIterator {
public:
    vector<int> iterVector;
    int currentIndex;
    
    BSTIterator(TreeNode* root) {
        currentIndex = 0;
        TreeNode* cur = root;
        vector<TreeNode*> BSTStack;
        
        while(BSTStack.size() != 0 || cur != NULL) {
            while(cur != NULL) {
                BSTStack.push_back(cur);
                cur = cur->left;
            }
            cur = BSTStack.back();
            iterVector.push_back(cur->val);
            cur = cur->right;
            BSTStack.pop_back();
        }
    }
    
    /** @return the next smallest number */
    int next() {
        int nextNum = iterVector[currentIndex];
        currentIndex ++;
        return nextNum;
    }
    
    /** @return whether we have a next smallest number */
    bool hasNext() {
        if (currentIndex>=iterVector.size()) return false;
        else {
            return true;
        }
    }
};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */
