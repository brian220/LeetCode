// Medium
// Find the center of the palindromic str first.
class Solution {
public:
    int longestHead; // The head of Palindromic Str
    int longestLen;
    
    Solution():longestHead(0), longestLen(1) {}
        
    string longestPalindrome(string s) {
        string result = "";
        if (s.length() == 0) return result;
        
        for (int i = 0; i < s.length(); i ++) {
            if (i + 1 < s.length()) {
                if (i - 1 >= 0) {
                    if (s[i - 1] == s[i + 1]) updateLongestStrOdd(s, i);// The case "aba"
                }
                if (s[i] == s[i + 1]) updateLongestStrEven(s, i); // The case "abba"
            }
         }
        
         result = s.substr(longestHead, longestLen);
         
         return result;
    }
    
    void updateLongestStrOdd(string s, int i) {
        int leftP = i - 2;
        int rightP = i + 2;
        int currentLen = 3;
        while (leftP >= 0 && rightP < s.length()) {
             if(s[leftP] == s[rightP]) {
                 currentLen += 2;
                 leftP --;
                 rightP ++;
             }
             else {
                 break;
             }
        }
        
        if (currentLen > longestLen) {
            longestHead = i - (currentLen/2);
            longestLen = currentLen;
        }
    }
    
    void updateLongestStrEven(string s, int i) {
        int leftP = i - 1;
        int rightP = i + 2;
        int currentLen = 2;
        while (leftP >= 0 && rightP < s.length()) {
            if (s[leftP] == s[rightP]) {
                currentLen += 2;
                leftP --;
                rightP ++;
            }
            else {
                break;
            }
        }
        
        if (currentLen > longestLen) {
            longestHead = i - (currentLen/2 - 1);
            longestLen = currentLen;
        }
    }
    
    
};
