/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if (l1 == NULL) {
            return l2;
        }
        if (l2 == NULL) {
            return l1;
        }
        
        ListNode* head = new ListNode(0);
        head -> next = l1;
        if (l1 -> val > l2 -> val) {
            head -> next = l2;
        }
        ListNode* prevL1 = new ListNode(0);
        ListNode* prevL2 = new ListNode(0);
        
        string state = "l1";
        while (1) {
            if (l1 -> val <= l2 -> val) {
                if (state == "l2") {
                    prevL2 -> next = l1;
                    state = "l1";
                }
                if (l1 -> next == NULL) {
                    l1 -> next = l2;
                    break;
                }
                prevL1 = l1;
                l1 = l1 -> next;
            }
            else {
               
                if (state == "l1") {
                    prevL1 -> next = l2;
                    state = "l2";
                }
                if (l2 -> next == NULL) {
                    l2 -> next = l1;
                    break;
                }
                prevL2 = l2;
                l2 = l2 -> next;
            }
        }
        
        return head -> next;
    }
};


// IMPOVE SOLUTION
/*
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if (l1 == NULL) return l2;
        if (l2 == NULL) return l1;
        
        ListNode* head = new ListNode(0);
        ListNode* currentNode = head;
   
        while (l1 != NULL && l2 != NULL) {
           if (l2 -> val < l1 -> val) {
               currentNode -> next = l2; 
               l2 = l2 -> next;
           }
           else {
               currentNode -> next = l1;
               l1 = l1 -> next;
           }
           
           currentNode = currentNode -> next;
        }
        
        if (l1 != NULL) currentNode -> next = l1;
        if (l2 != NULL) currentNode -> next = l2;
        
        return head -> next;
    }
};
*/
