class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int i = 0;
        int currentLength = 0;
        int maxLength = 0;
        unordered_map <char, int> hashTable;
        for (int j = 0; j < s.size(); j ++) {
            hashTable[s[j]] ++;
            // Repeat number
            while(hashTable[s[j]] > 1) {
                hashTable[s[i]] --;
                i ++;
            }
            
            // Update max length
            currentLength = j - i + 1;
            if (currentLength > maxLength) {
                maxLength = currentLength;
            }
        }
        return maxLength;
    }
};

/* Improved solution
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int i = 0;
        int maxLength = 0;
        // Instead of store the number of char, store it's index + 1
        // Then i can jump to the index + 1 directly
        unordered_map <char, int> hashTable;
        for (int j = 0; j < s.size(); j ++) {
            if (hashTable[s[j]] != 0) {
                i = max(hashTable[s[j]], i);
            }
            hashTable[s[j]] = j + 1;
            
            // Update max length
            maxLength = max(maxLength, j - i + 1);
        }
        return maxLength;
    }
};
*/
